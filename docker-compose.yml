version: "3.9"
services:
  #Creates a genesis state for the beacon chain using a YAML configuration file and
  # a deterministic set of 64 validators.
  create-beacon-chain-genesis:
    image: "gcr.io/prysmaticlabs/prysm/cmd/prysmctl:local-devnet"
    command:
      - testnet
      - generate-genesis
      - --fork=capella
        # - --fork=deneb
      - --num-validators=64
      - --output-ssz=/consensus/genesis.ssz
      - --chain-config-file=/consensus/config.yml
      - --geth-genesis-json-in=/execution/genesis.json
      - --geth-genesis-json-out=/execution/genesis.json
    volumes:
      - ./consensus:/consensus
      - ./execution:/execution
    networks: 
      - bcnetwork
    profiles: [pos]

  # Sets up the genesis configuration for the go-ethereum client from a JSON file.
  geth-genesis-pos:
    container_name: geth-genesis-pos
    image: "ethereum/client-go:release-1.13"
    command: --datadir=/execution init /execution/genesis.json
    volumes:
      - ./execution:/execution
      - ./execution/genesis.json:/execution/genesis.json
    depends_on:
      create-beacon-chain-genesis:
        condition: service_completed_successfully
    networks: 
      - bcnetwork
    profiles: [pos]

  # Runs a Prysm beacon chain from a specified genesis state created in the previous step
  # and connects to go-ethereum in the same network as the execution client.
  # The account used in go-ethereum is set as the suggested fee recipient for transactions
  # proposed via the validators attached to the beacon node.
  beacon-chain:
    image: "gcr.io/prysmaticlabs/prysm/beacon-chain:v4.2.1"
    command:
      - --datadir=/consensus/beacondata
      # No peers to sync with in this testnet, so setting to 0
      - --min-sync-peers=0
      - --genesis-state=/consensus/genesis.ssz
      - --bootstrap-node=
      - --interop-eth1data-votes
      # The chain configuration file used for setting up Prysm
      - --chain-config-file=/consensus/config.yml
      # We specify the chain id used by our execution client
      - --contract-deployment-block=0
      - --chain-id=${CHAIN_ID:-32382}
      - --rpc-host=0.0.0.0
      - --grpc-gateway-host=0.0.0.0
      - --execution-endpoint=http://geth:8551
      - --accept-terms-of-use
      - --jwt-secret=/execution/jwtsecret
      - --suggested-fee-recipient=0x123463a4b065722e99115d6c222f267d9cabb524
      - --minimum-peers-per-subnet=0
      - --enable-debug-rpc-endpoints
    depends_on:
      create-beacon-chain-genesis:
        condition: service_completed_successfully
    ports:
      - 4000:4000
      - 3500:3500
      # - 8080:8080
      # - 6060:6060
      # - 32382:32382
    volumes:
      - ./consensus:/consensus
      - ./execution:/execution
      - ./execution/jwtsecret:/execution/jwtsecret
    networks: 
      - bcnetwork
    profiles: [pos]

  # Runs the go-ethereum execution client with the specified, unlocked account and necessary
  # APIs to allow for proof-of-stake consensus via Prysm.
  geth-pos:
    container_name: geth
    image: "ethereum/client-go:release-1.13"
    command:
      - --http
      - --http.api=debug,net,eth,web3,engine,txpool
      - --http.addr=0.0.0.0
      - --http.corsdomain=*
      - --http.port=8545
      - --ws
      - --ws.api=debug,net,eth,web3,engine,txpool
      - --ws.addr=0.0.0.0
      - --ws.port=8546
      - --ws.origins=*
      - --authrpc.vhosts=*
      - --authrpc.addr=0.0.0.0
      - --authrpc.port=8551
      - --authrpc.jwtsecret=/execution/jwtsecret
      - --datadir=/execution
      - --allow-insecure-unlock
      - --unlock=0x123463a4b065722e99115d6c222f267d9cabb524
      - --password=/execution/geth_password.txt
      - --nodiscover
      - --syncmode=full
      - --metrics
      - --metrics.addr=geth
      - --metrics.port=6060
      - --metrics.expensive
    ports:
      - 8545:8545
      - 8546:8546
      - 8551:8551
      - 6060:6060
    depends_on:
      geth-genesis-pos:
        condition: service_completed_successfully
      beacon-chain:
        condition: service_started
    volumes:
      - ./execution:/execution
      - ./execution/jwtsecret:/execution/jwtsecret
      - ./execution/geth_password.txt:/execution/geth_password.txt
    networks: 
      - bcnetwork
    profiles: [pos]

  # We run a validator client with 64, deterministically-generated keys that match
  # The validator keys present in the beacon chain genesis state generated a few steps above.
  validator:
    image: "gcr.io/prysmaticlabs/prysm/validator:v4.1.1"
    command:
      - --beacon-rpc-provider=beacon-chain:4000
      - --datadir=/consensus/validatordata
      - --accept-terms-of-use
      - --interop-num-validators=64
      - --interop-start-index=0
      - --chain-config-file=/consensus/config.yml
    depends_on:
      beacon-chain:
        condition: service_started
    volumes:
      - ./consensus:/consensus
    networks: 
      - bcnetwork
    profiles: [pos]

  geth-genesis-poa:
    container_name: geth-genesis-poa
    image: "ethereum/client-go:release-1.13"
    command: --datadir=/execution init /execution/genesis-poa.json
    volumes:
      - ./execution:/execution
      - ./execution/genesis-poa.json:/execution/genesis-poa.json
    networks: 
      - bcnetwork
    profiles: [poa]

  # Runs the go-ethereum execution client with the specified, unlocked account and necessary
  # APIs to allow for proof-of-stake consensus via Prysm.
  geth-poa:
    container_name: geth
    image: "ethereum/client-go:release-1.13"
    command:
      - --http
      - --http.api=admin,clique,debug,engine,eth,miner,net,rpc,txpool,web3
      - --http.addr=0.0.0.0
      - --http.corsdomain=*
      - --http.port=8545
      - --ws
      - --ws.api=admin,clique,debug,engine,eth,miner,net,rpc,txpool,web3
      - --ws.addr=0.0.0.0
      - --ws.port=8546
      - --ws.origins=*
      - --authrpc.vhosts=*
      - --authrpc.addr=0.0.0.0
      - --authrpc.port=8551
      - --datadir=/execution
      - --allow-insecure-unlock
      - --unlock=0x123463a4b065722e99115d6c222f267d9cabb524
      - --password=/execution/geth_password.txt
      - --nodiscover
      - --syncmode=full
      - --metrics
      - --metrics.addr=geth
      - --metrics.port=6060
      - --metrics.expensive
      - --mine
      - --miner.etherbase=0x123463a4b065722e99115d6c222f267d9cabb524
    ports:
      - 8545:8545
      - 8546:8546
      - 8551:8551
      - 6060:6060
    depends_on:
      geth-genesis-poa:
        condition: service_completed_successfully
    volumes:
      - ./execution:/execution
      - ./execution/jwtsecret:/execution/jwtsecret
      - ./execution/geth_password.txt:/execution/geth_password.txt
    networks: 
      - bcnetwork
    profiles: [poa]

  lite-explorer:
    image: alethio/ethereum-lite-explorer
    ports:
      - 8081:80
    environment:
      - APP_NODE_URL=http://${IP_SERVER}:8545
    networks: 
      - bcnetwork

  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prom_data:/prometheus
    networks: 
      - bcnetwork
    profiles: [metrics]
  
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${APP_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${APP_PASSWORD}
    user: "0"
    volumes:
    - grafana_storage:/var/lib/grafana
    - ./grafana/:/etc/grafana/provisioning
    networks: 
      - bcnetwork
    profiles: [metrics]

  # # https://www.weave.works/docs/scope/latest/installing/#docker
  # weavescope:
  #   image: weaveworks/scope:1.13.2
  #   network_mode: "host"
  #   pid: "host"
  #   privileged: true
  #   ports:
  #     - "4040:4040"
  #   labels:
  #     - "works.weave.role=system"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:rw"
  #   command:
  #     - "--probe.docker=true"

volumes:
  prom_data:
  grafana_storage:

networks:
  bcnetwork:
    name: bcnetwork
    driver: bridge
